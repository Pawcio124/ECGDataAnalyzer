{"version":3,"sources":["Components/HomePage/HomePage.tsx","store/ekgDataSlice.ts","Components/CsvFileReader/CsvFileReader.tsx","store/hooks.ts","Components/CSVSaveModal/CSVFileSaveModal.tsx","Components/NavBar/NavBar.tsx","Components/EKGPlotComponent/PointEditorDialog.tsx","store/customHooks/useWindowDimension.tsx","Components/EKGPlotComponent/EKGPlotComponent.jsx","Components/InformationComponent/InformationComponent.tsx","Components/MainPage/MainPage.tsx","App.js","store/store.ts","index.tsx"],"names":["useStyles","makeStyles","textStyle","color","userSelect","welcomeTextStyle","fontSize","fontFamily","buttonStyle","welcomeBoxStyle","position","width","top","left","transform","textBoxStyle","display","height","justifyContent","padding","HomePage","classes","history","useHistory","Box","className","whiteSpace","textAlign","Typography","variant","IconButton","onClick","push","Input","editQuantity","state","sign","numberOperation","P","Q","R","S","T","ekgDataSlice","createSlice","name","initialState","navigateByR","ekg","signQuantity","loaded","ekgDataInfo","calculateSignsPTDone","calculateSignsQSDone","PIndex","QIndex","RIndex","SIndex","TIndex","reducers","setNavigateByR","saveEkgData","payload","forEach","index","data","clearEkgData","calculateSignsQS","findS","findQ","i","length","j","parseInt","splice","calculateSignsPT","valueArray","maxValueIndex","indexOf","Math","max","foundPIndex","addSign","oldSign","actions","positiveButton","background","actionButtonStyle","borderRadius","marginLeft","marginRight","fileNameStyle","CsvFileReader","props","addToast","useToasts","buttonRef","useRef","childRef","dispatch","useDispatch","handleOpenDialog","e","current","open","handleRemoveFile","removeFile","appearance","autoDismiss","ref","onFileLoad","onError","err","message","noClick","noDrag","noProgressBar","file","paddingTop","Button","disabled","useAppSelector","useSelector","downloadLinkStyle","textDecoration","disabledDownloadLinkStyle","closeIconStyle","right","disableButton","marginTop","CSVFileSaveModal","ekgDataPlot","ekgData","useState","fileName","setFileName","touch","setTouch","Dialog","PaperProps","style","border","onClose","setCSVFileModalOpen","CSVFileModalOpen","DialogTitle","disableTypography","HighlightOff","DialogContent","Grid","container","spacing","item","xs","TextField","error","fullWidth","value","onChange","target","placeholder","helperText","ButtonGroup","filename","noMaxWidth","maxWidth","backgroundColor","noMaxWidthR","buttonNavigateStyle","paddingRight","buttonNavigateStyleR","logoTextStyle","fontWeight","cursor","loadFileButton","appBarStyle","menuButtonStyle","NavBar","setCounter","openScvReader","setOpenCsvReader","React","createRef","AppBar","Toolbar","Tooltip","arrow","tooltip","title","modalButtonStyle","marginBottom","editButtonStyle","modalContentStyle","quickSelectSignStyle","quickOptionHints","PointEditorDialog","openPointModal","setOpenPointModal","selectedPoint","setSelectedPoint","handleCLickAndPress","x","y","onKeyPress","key","toLowerCase","label","map","getWindowDimensions","window","innerWidth","innerHeight","EKGPlotComponent","counter","lengthOfR","indexR","step","ceil","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","xAxisData","setXAxisData","yAxisData","setYAxisData","textData","setTextData","annotation","setAnnotation","stepValue","annotations","slice","xref","yref","text","showarrow","arrowhead","ax","ay","alignItems","FirstPage","oldValue","ArrowBackIos","type","mode","marker","layout","points","pointIndex","ArrowForwardIos","LastPage","createData","quantity","InformationComponent","information","rows","bgcolor","m","p","paddingBottom","Table","size","TableHead","TableRow","TableCell","TableBody","row","component","scope","MainPage","showInfo","RPointsLength","tabIndex","onKeyDown","preventDefault","App","path","combineReducers","persistConfig","version","storage","createIdbStorage","storeName","persistedReducers","persistReducer","store","configureStore","reducer","devTools","process","middleware","thunk","persist","persistStore","rootElement","document","getElementById","ReactDOM","render","loading","persistor"],"mappings":"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","file":"static/js/main.611033e1.chunk.js","sourcesContent":["import { Box, IconButton, Typography } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Input } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles({\n  textStyle: {\n    color: \"white\",\n    userSelect: \"none\",\n  },\n  welcomeTextStyle: {\n    color: \"white\",\n    fontSize: 130,\n    fontFamily: \"Indie Flower\",\n    userSelect: \"none\",\n  },\n  buttonStyle: {\n    color: \"white\",\n    fontSize: 120,\n  },\n  welcomeBoxStyle: {\n    position: \"absolute\",\n    width: \"auto\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n  textBoxStyle: {\n    display: \"flex\",\n    height: \"100%\",\n    justifyContent: \"center\",\n    padding: \"85px\",\n  },\n});\n\nconst HomePage = () => {\n  const classes = useStyles();\n  let history = useHistory();\n\n  const handleClick = () => {\n    history.push(\"/ECGDataAnalyzer\");\n  };\n\n  return (\n    <Box className={classes.welcomeBoxStyle}>\n      <Box className={classes.textBoxStyle}>\n        <Box whiteSpace={\"nowrap\"} textAlign={\"center\"}>\n          <Typography className={classes.textStyle} variant={\"h2\"}>\n            Welcome!\n          </Typography>\n          <Typography className={classes.welcomeTextStyle}>\n            ECG Data Analyzer\n          </Typography>\n          <IconButton onClick={handleClick}>\n            <Input className={classes.buttonStyle} />\n          </IconButton>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default HomePage;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst editQuantity = (\n  state: { P: number; Q: number; R: number; S: number; T: number },\n  sign: string,\n  numberOperation: number\n) => {\n  switch (sign) {\n    case \"P\":\n      state.P = state.P + numberOperation;\n      break;\n    case \"Q\":\n      state.Q = state.Q + numberOperation;\n      break;\n    case \"R\":\n      state.R = state.R + numberOperation;\n      break;\n    case \"S\":\n      state.S = state.S + numberOperation;\n      break;\n    case \"T\":\n      state.T = state.T + numberOperation;\n      break;\n    default:\n      break;\n  }\n};\n\ninterface ekgDataSliceProps {\n  navigateByR: boolean;\n  ekg: any[];\n  loaded: boolean;\n  signQuantity: { P: number; Q: number; R: number; S: number; T: number };\n  ekgDataInfo: {\n    calculateSignsPTDone: boolean;\n    calculateSignsQSDone: boolean;\n    PIndex: number[];\n    QIndex: number[];\n    RIndex: number[];\n    SIndex: number[];\n    TIndex: number[];\n  };\n}\n\nconst initialState: ekgDataSliceProps = {\n  navigateByR: false,\n  ekg: [],\n  signQuantity: { P: 0, Q: 0, R: 0, S: 0, T: 0 },\n  loaded: false,\n  ekgDataInfo: {\n    calculateSignsPTDone: false,\n    calculateSignsQSDone: false,\n    PIndex: [],\n    QIndex: [],\n    RIndex: [],\n    SIndex: [],\n    TIndex: [],\n  },\n};\nexport const ekgDataSlice = createSlice({\n  name: \"ekgData\",\n  initialState,\n  reducers: {\n    setNavigateByR: (state) => {\n      state.navigateByR = !state.navigateByR;\n    },\n    saveEkgData: (state, payload) => {\n      payload.payload.forEach(({ data }: any, index: number) => {\n        if (data[2]) {\n          editQuantity(state.signQuantity, data[2], 1);\n          if (data[2] === \"R\") {\n            state.ekgDataInfo.RIndex.push(index);\n          }\n        }\n        state.ekg.push([data[0], data[1], data[2] ?? \"\"]);\n      });\n      state.loaded = true;\n    },\n    clearEkgData: (state) => {\n      state.navigateByR = false;\n      state.ekg = [];\n      state.signQuantity = { P: 0, Q: 0, R: 0, S: 0, T: 0 };\n      state.loaded = false;\n      state.ekgDataInfo = {\n        calculateSignsPTDone: false,\n        calculateSignsQSDone: false,\n        PIndex: [],\n        QIndex: [],\n        RIndex: [],\n        SIndex: [],\n        TIndex: [],\n      };\n    },\n    calculateSignsQS: (state) => {\n      let findS = false;\n      let findQ = false;\n      for (let i = 0; i < state.ekgDataInfo.RIndex.length; i++) {\n        for (\n          let j = state.ekgDataInfo.RIndex[i] + 1;\n          j < state.ekgDataInfo.RIndex[i + 1];\n          j++\n        ) {\n          if (\n            parseInt(state.ekg[j][1]) < parseInt(state.ekg[j + 1][1]) &&\n            !findS\n          ) {\n            findS = true;\n            editQuantity(state.signQuantity, \"S\", 1);\n            state.ekgDataInfo.SIndex.push(j);\n            state.ekg.splice(j, 1, [state.ekg[j][0], state.ekg[j][1], \"S\"]);\n          }\n          if (\n            parseInt(state.ekg[j][1]) < parseInt(state.ekg[j + 1][1]) &&\n            state.ekgDataInfo.RIndex[i + 1] - j <= 5 &&\n            findS &&\n            !findQ\n          ) {\n            findQ = true;\n            editQuantity(state.signQuantity, \"Q\", 1);\n            state.ekgDataInfo.QIndex.push(j);\n            state.ekg.splice(j, 1, [state.ekg[j][0], state.ekg[j][1], \"Q\"]);\n            break;\n          }\n        }\n        findS = false;\n        findQ = false;\n      }\n      state.ekgDataInfo.calculateSignsQSDone = true;\n    },\n    calculateSignsPT: (state) => {\n      for (let i = 0; i < state.ekgDataInfo.QIndex.length; i++) {\n        const QIndex = state.ekgDataInfo.QIndex[i];\n        const valueArray: number[] = [];\n        for (let j = 20; j > 0; j--) {\n          valueArray.push(parseInt(state.ekg[QIndex - j][1]));\n        }\n        const maxValueIndex = valueArray.indexOf(Math.max(...valueArray));\n        if (maxValueIndex !== -1) {\n          const foundPIndex = QIndex - (valueArray.length - maxValueIndex);\n          editQuantity(state.signQuantity, \"P\", 1);\n          state.ekgDataInfo.PIndex.push(foundPIndex);\n          state.ekg.splice(foundPIndex, 1, [\n            state.ekg[foundPIndex][0],\n            state.ekg[foundPIndex][1],\n            \"P\",\n          ]);\n        }\n      }\n      for (let i = 0; i < state.ekgDataInfo.SIndex.length; i++) {\n        const SIndex = state.ekgDataInfo.SIndex[i];\n        const valueArray: number[] = [];\n        for (let j = 6; j < 40; j++) {\n          valueArray.push(parseInt(state.ekg[SIndex + j][1]));\n        }\n        const maxValueIndex = valueArray.indexOf(Math.max(...valueArray));\n        if (maxValueIndex !== -1) {\n          const foundPIndex = SIndex + maxValueIndex + 6;\n          editQuantity(state.signQuantity, \"T\", 1);\n          state.ekgDataInfo.TIndex.push(foundPIndex);\n          state.ekg.splice(foundPIndex, 1, [\n            state.ekg[foundPIndex][0],\n            state.ekg[foundPIndex][1],\n            \"T\",\n          ]);\n        }\n      }\n      state.ekgDataInfo.calculateSignsPTDone = true;\n    },\n\n    addSign: (state, payload) => {\n      const { index, sign, oldSign } = payload.payload;\n      editQuantity(state.signQuantity, sign, 1);\n      editQuantity(state.signQuantity, oldSign, -1);\n      state.ekg.splice(index, 1, [\n        state.ekg[index][0],\n        state.ekg[index][1],\n        sign ?? \"\",\n      ]);\n    },\n  },\n});\n\nexport const {\n  setNavigateByR,\n  saveEkgData,\n  clearEkgData,\n  addSign,\n  calculateSignsQS,\n  calculateSignsPT,\n} = ekgDataSlice.actions;\n\nexport default ekgDataSlice.reducer;\n","import React, { useRef } from \"react\";\nimport { CSVReader } from \"react-papaparse\";\nimport { useDispatch } from \"react-redux\";\nimport { clearEkgData, saveEkgData } from \"../../store/ekgDataSlice\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Box, Button, Typography } from \"@material-ui/core\";\nimport { useToasts } from \"react-toast-notifications\";\n\nconst useStyles = makeStyles({\n  positiveButton: {\n    background: \"#4caf50\",\n    \"&:hover\": {\n      background: \"#388e3c\",\n    },\n  },\n  actionButtonStyle: {\n    borderRadius: 40,\n    width: \"150px\",\n    height: \"50px\",\n    marginLeft: \"50px\",\n    marginRight: \"50px\",\n  },\n  fileNameStyle: {\n    height: 20,\n  },\n});\n\ninterface CsvFileReaderProps {\n  childRef: any;\n}\n\nconst CsvFileReader = (props: CsvFileReaderProps) => {\n  const classes = useStyles();\n  const { addToast } = useToasts();\n  const buttonRef = useRef(props.childRef);\n\n  const dispatch = useDispatch();\n\n  const handleOpenDialog = (e: any) => {\n    if (buttonRef.current) {\n      buttonRef.current.open(e);\n    }\n  };\n\n  const handleOnFileLoad = (data: any) => {\n    dispatch(clearEkgData());\n    dispatch(saveEkgData(data));\n    addToast(\"File Loaded Successfully.\", {\n      appearance: \"success\",\n      autoDismiss: true,\n    });\n  };\n\n  const handleOnError = (err: any) => {\n    addToast(err.message, { appearance: \"error\", autoDismiss: true });\n  };\n\n  const handleRemoveFile = () => {\n    if (buttonRef.current) {\n      buttonRef.current.removeFile();\n      dispatch(clearEkgData());\n      addToast(\"File Removed.\", {\n        appearance: \"error\",\n        autoDismiss: true,\n      });\n    }\n  };\n  return (\n    <>\n      <CSVReader\n        ref={buttonRef}\n        onFileLoad={handleOnFileLoad}\n        onError={handleOnError}\n        noClick\n        noDrag\n        noProgressBar\n      >\n        {\n          // @ts-ignore\n          ({ file }) => (\n            <>\n              <Typography className={classes.fileNameStyle} variant={\"h4\"}>\n                {file && file.name}\n              </Typography>\n              <Box paddingTop={10}>\n                <Button\n                  className={`${classes.actionButtonStyle} ${classes.positiveButton}`}\n                  variant=\"contained\"\n                  color={\"primary\"}\n                  onClick={handleOpenDialog}\n                >\n                  Browse file\n                </Button>\n                <Button\n                  disabled={!file}\n                  variant=\"contained\"\n                  color={\"secondary\"}\n                  onClick={handleRemoveFile}\n                  className={classes.actionButtonStyle}\n                >\n                  Remove\n                </Button>\n              </Box>\n            </>\n          )\n        }\n      </CSVReader>\n    </>\n  );\n};\n\nexport default CsvFileReader;\n","import { TypedUseSelectorHook, useSelector } from \"react-redux\";\nimport type { RootState } from \"./store\";\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import {\n  Button,\n  ButtonGroup,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  Grid,\n  IconButton,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { SetStateAction, useState } from \"react\";\nimport { CSVDownloader } from \"react-papaparse\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useAppSelector } from \"../../store/hooks\";\nimport { HighlightOff } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles({\n  downloadLinkStyle: {\n    color: \"black\",\n    textDecoration: \"none\",\n  },\n  disabledDownloadLinkStyle: {\n    color: \"rgba(0, 0, 0, 0.26)\",\n    textDecoration: \"none\",\n  },\n  closeIconStyle: {\n    position: \"absolute\",\n    right: 0,\n    top: 0,\n  },\n  disableButton: {\n    marginTop: 20,\n    borderRadius: 40,\n  },\n  positiveButton: {\n    background: \"#4caf50\",\n    \"&:hover\": {\n      background: \"#388e3c\",\n    },\n  },\n  actionButtonStyle: {\n    marginTop: 20,\n    borderRadius: 40,\n  },\n});\n\ninterface CSVFileSaveModalProps {\n  CSVFileModalOpen: boolean;\n  setCSVFileModalOpen: React.Dispatch<SetStateAction<boolean>>;\n}\n\nconst CSVFileSaveModal = (props: CSVFileSaveModalProps) => {\n  const ekgDataPlot = useAppSelector((state) => state.ekgData.ekg);\n  const [fileName, setFileName] = useState(\"\");\n  const [touch, setTouch] = useState(false);\n  const classes = useStyles();\n  return (\n    <Dialog\n      PaperProps={{\n        style: {\n          padding: 18,\n          border: \"solid 2px grey\",\n          borderRadius: 40,\n          textAlign: \"center\",\n        },\n      }}\n      onClose={() => {\n        props.setCSVFileModalOpen(false);\n        setFileName(\"\");\n        setTouch(false);\n      }}\n      open={props.CSVFileModalOpen}\n    >\n      <DialogTitle disableTypography={true}>\n        <IconButton\n          onClick={() => {\n            props.setCSVFileModalOpen(false);\n            setFileName(\"\");\n            setTouch(false);\n          }}\n          className={classes.closeIconStyle}\n        >\n          <HighlightOff />\n        </IconButton>\n        <Typography variant={\"h3\"}>Save data to new file</Typography>\n      </DialogTitle>\n      <DialogContent>\n        <Grid container spacing={1}>\n          <Grid item xs={12}>\n            <TextField\n              error={!fileName.length && touch}\n              onClick={() => setTouch(true)}\n              fullWidth\n              value={fileName}\n              onChange={(e) => setFileName(e.target.value)}\n              variant={\"outlined\"}\n              placeholder={\"Set file name\"}\n              helperText={!fileName.length && touch ? \"Required\" : null}\n            />\n          </Grid>\n\n          <ButtonGroup color=\"primary\" fullWidth>\n            <Button\n              className={\n                fileName === \"\"\n                  ? classes.disableButton\n                  : `${classes.actionButtonStyle} ${classes.positiveButton}`\n              }\n              disabled={fileName === \"\"}\n            >\n              <CSVDownloader\n                filename={fileName}\n                className={\n                  fileName === \"\"\n                    ? classes.disabledDownloadLinkStyle\n                    : classes.downloadLinkStyle\n                }\n                data={ekgDataPlot}\n              >\n                Save\n              </CSVDownloader>\n            </Button>\n          </ButtonGroup>\n        </Grid>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default CSVFileSaveModal;\n","import {\n  AppBar,\n  Button,\n  ButtonGroup,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  IconButton,\n  Toolbar,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useHistory } from \"react-router-dom\";\nimport React, { useState } from \"react\";\nimport CsvFileReader from \"../CsvFileReader/CsvFileReader\";\nimport { useAppSelector } from \"../../store/hooks\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  calculateSignsPT,\n  calculateSignsQS,\n  clearEkgData,\n  setNavigateByR,\n} from \"../../store/ekgDataSlice\";\nimport { HighlightOff } from \"@material-ui/icons\";\nimport { useToasts } from \"react-toast-notifications\";\nimport CSVFileSaveModal from \"../CSVSaveModal/CSVFileSaveModal\";\n\nconst useStyles = makeStyles({\n  noMaxWidth: {\n    maxWidth: \"none\",\n    backgroundColor: \"red\",\n  },\n  noMaxWidthR: {\n    maxWidth: \"none\",\n    backgroundColor: \"gray\",\n  },\n  buttonNavigateStyle: {\n    paddingRight: 10,\n    color: \"red\",\n  },\n  buttonNavigateStyleR: {\n    paddingRight: 10,\n    color: \"green\",\n  },\n  logoTextStyle: {\n    fontSize: 45,\n    fontWeight: \"bold\",\n    userSelect: \"none\",\n    fontFamily: \"Indie Flower\",\n    \"&:hover\": {\n      cursor: \"pointer\",\n    },\n  },\n  loadFileButton: {\n    \"&:after\": {\n      backgroundColor: \"red\",\n    },\n  },\n  appBarStyle: {\n    border: \"solid 2px gray\",\n    borderRadius: \"20px\",\n  },\n  menuButtonStyle: {\n    position: \"absolute\",\n    right: \"30px\",\n  },\n  closeIconStyle: {\n    position: \"absolute\",\n    right: 0,\n    top: 0,\n  },\n});\n\ninterface NavBarProps {\n  setCounter: React.Dispatch<React.SetStateAction<number>>;\n}\n\nconst NavBar = ({ setCounter }: NavBarProps) => {\n  const [openScvReader, setOpenCsvReader] = useState(false);\n  const [CSVFileModalOpen, setCSVFileModalOpen] = useState(false);\n  const ekgDataPlot = useAppSelector((state) => state.ekgData.ekg);\n  const navigateByR = useAppSelector((state) => state.ekgData.navigateByR);\n  const { calculateSignsPTDone, calculateSignsQSDone } = useAppSelector(\n    (state) => state.ekgData.ekgDataInfo\n  );\n  let history = useHistory();\n  const { addToast } = useToasts();\n  const dispatch = useDispatch();\n\n  const ref = React.createRef();\n\n  const homePageHandle = () => {\n    history.push(\"/\");\n  };\n\n  const classes = useStyles();\n  return (\n    <>\n      <AppBar\n        className={classes.appBarStyle}\n        color={\"inherit\"}\n        position=\"static\"\n      >\n        <Toolbar>\n          <Typography\n            onClick={homePageHandle}\n            className={classes.logoTextStyle}\n            variant=\"h4\"\n          >\n            ECG Data Analyzer\n          </Typography>\n          <ButtonGroup\n            className={classes.menuButtonStyle}\n            variant=\"text\"\n            color=\"inherit\"\n          >\n            {ekgDataPlot.length === 0 ? null : (\n              <Tooltip\n                arrow\n                classes={{\n                  tooltip: navigateByR\n                    ? classes.noMaxWidthR\n                    : classes.noMaxWidth,\n                }}\n                title={\n                  navigateByR ? (\n                    <Typography variant={\"h6\"}>\n                      Navigate by steps (default option)\n                    </Typography>\n                  ) : (\n                    <Typography variant={\"h6\"}>\n                      Make sure the R points are marked\n                    </Typography>\n                  )\n                }\n              >\n                <Button\n                  className={\n                    navigateByR\n                      ? classes.buttonNavigateStyleR\n                      : classes.buttonNavigateStyle\n                  }\n                  onClick={() => {\n                    setCounter(1);\n                    dispatch(setNavigateByR());\n                  }}\n                >\n                  Navigate by R ({navigateByR ? \"ON\" : \"OFF\"})\n                </Button>\n              </Tooltip>\n            )}\n            <Button\n              disabled={\n                ekgDataPlot.length === 0 ||\n                (ekgDataPlot.length !== 0 && calculateSignsQSDone)\n              }\n              className={classes.loadFileButton}\n              onClick={() => {\n                dispatch(calculateSignsQS());\n                addToast(\"Signs Q And S calculated successfully.\", {\n                  appearance: \"success\",\n                  autoDismiss: true,\n                });\n              }}\n            >\n              Try calculate signs (Q,S)\n            </Button>\n            <Button\n              disabled={\n                !calculateSignsQSDone ||\n                (calculateSignsQSDone && calculateSignsPTDone)\n              }\n              className={classes.loadFileButton}\n              onClick={() => {\n                dispatch(calculateSignsPT());\n                addToast(\"Signs P and T calculated successfully.\", {\n                  appearance: \"success\",\n                  autoDismiss: true,\n                });\n              }}\n            >\n              Try calculate signs (P,T)\n            </Button>\n            <Button\n              className={classes.loadFileButton}\n              onClick={() => setOpenCsvReader(true)}\n            >\n              Load from file\n            </Button>\n            <Button\n              onClick={() => setCSVFileModalOpen(true)}\n              disabled={ekgDataPlot.length === 0}\n            >\n              Save to file\n            </Button>\n            <Button\n              disabled={ekgDataPlot.length === 0}\n              onClick={() => {\n                dispatch(clearEkgData());\n                addToast(\"File Removed.\", {\n                  appearance: \"error\",\n                  autoDismiss: true,\n                });\n              }}\n            >\n              Remove file\n            </Button>\n          </ButtonGroup>\n        </Toolbar>\n      </AppBar>\n      <CSVFileSaveModal\n        CSVFileModalOpen={CSVFileModalOpen}\n        setCSVFileModalOpen={setCSVFileModalOpen}\n      />\n      <Dialog\n        PaperProps={{\n          style: {\n            padding: 18,\n            border: \"solid 2px grey\",\n            borderRadius: 40,\n            textAlign: \"center\",\n          },\n        }}\n        open={openScvReader}\n        onClose={() => setOpenCsvReader(false)}\n      >\n        <DialogTitle disableTypography={true}>\n          <IconButton\n            onClick={() => setOpenCsvReader(false)}\n            className={classes.closeIconStyle}\n          >\n            <HighlightOff />\n          </IconButton>\n          <Typography variant={\"h3\"}> Select file to read data</Typography>\n          <Typography variant={\"inherit\"}>\n            (*.csv data format: TimeStamp, ECG value, Sign)\n          </Typography>\n        </DialogTitle>\n        <DialogContent>\n          <CsvFileReader childRef={ref} />\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n};\n\nexport default NavBar;\n","import {\n  Button,\n  ButtonGroup,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  Grid,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addSign } from \"../../store/ekgDataSlice\";\nimport { useToasts } from \"react-toast-notifications\";\n\nconst useStyles = makeStyles({\n  modalButtonStyle: {\n    marginTop: \"20px\",\n    marginBottom: \"10px\",\n    width: 100,\n  },\n  editButtonStyle: {\n    color: \"white\",\n    background: \"#4caf50\",\n    \"&:hover\": {\n      background: \"#388e3c\",\n    },\n  },\n  modalContentStyle: {\n    textAlign: \"left\",\n  },\n  quickSelectSignStyle: {\n    marginTop: \"20px\",\n    marginBottom: \"15px\",\n  },\n  quickOptionHints: {\n    textAlign: \"center\",\n    color: \"gray\",\n  },\n});\n\ninterface SelectedPointProps {\n  x: number;\n  y: number;\n  index: number;\n  sign: string;\n}\n\ninterface PointEditorDialogProps {\n  openPointModal: boolean;\n  setSelectedPoint: React.Dispatch<React.SetStateAction<SelectedPointProps>>;\n  setOpenPointModal: React.Dispatch<React.SetStateAction<boolean>>;\n  selectedPoint: SelectedPointProps | undefined;\n}\n\nconst PointEditorDialog = ({\n  openPointModal,\n  setOpenPointModal,\n  selectedPoint,\n  setSelectedPoint,\n}: PointEditorDialogProps) => {\n  const { addToast } = useToasts();\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const signButtons = [\n    { label: \"None\", value: \"\" },\n    { label: \"P\", value: \"P\" },\n    { label: \"Q\", value: \"Q\" },\n    { label: \"R\", value: \"R\" },\n    { label: \"S\", value: \"S\" },\n    { label: \"T\", value: \"T\" },\n  ];\n\n  const handleCLickAndPress = (item: { value: string }) => {\n    dispatch(\n      addSign({\n        index: selectedPoint?.index,\n        sign: item.value,\n        oldSign: selectedPoint?.sign,\n      })\n    );\n    setSelectedPoint({ x: 0, y: 0, index: 0, sign: \"\" });\n    setOpenPointModal(false);\n    if (item.value === \"\") {\n      addToast(\"Sign removed.\", {\n        appearance: \"info\",\n        autoDismiss: true,\n      });\n    } else {\n      addToast(`Sign added: '${item.value}'.`, {\n        appearance: \"info\",\n        autoDismiss: true,\n      });\n    }\n  };\n\n  return (\n    <Dialog\n      onKeyPress={(e) => {\n        switch (e.key.toLowerCase()) {\n          case \"t\":\n            handleCLickAndPress({ value: \"T\" });\n            break;\n          case \"p\":\n            handleCLickAndPress({ value: \"P\" });\n            break;\n          case \"q\":\n            handleCLickAndPress({ value: \"Q\" });\n            break;\n          case \"r\":\n            handleCLickAndPress({ value: \"R\" });\n            break;\n          case \"s\":\n            handleCLickAndPress({ value: \"S\" });\n            break;\n          case \"d\":\n            handleCLickAndPress({ value: \"\" });\n            break;\n          default:\n            break;\n        }\n      }}\n      PaperProps={{\n        style: {\n          padding: 10,\n          border: \"solid 2px grey\",\n          borderRadius: 40,\n          textAlign: \"center\",\n        },\n      }}\n      open={openPointModal}\n      onClose={() => {\n        setSelectedPoint({ x: 0, y: 0, index: 0, sign: \"\" });\n        setOpenPointModal(false);\n      }}\n    >\n      <DialogTitle disableTypography={true}>\n        <Typography variant={\"h3\"}>Edit Point</Typography>\n      </DialogTitle>\n      <DialogContent>\n        <Grid className={classes.modalContentStyle} container spacing={1}>\n          <Grid item xs={6}>\n            Time stamp(UNIX):\n          </Grid>\n          <Grid item xs={6}>\n            {selectedPoint && selectedPoint.x ? selectedPoint.x : \"\"}\n          </Grid>\n          <Grid item xs={6}>\n            uV:\n          </Grid>\n          <Grid item xs={6}>\n            {selectedPoint && selectedPoint.y ? selectedPoint.y : \"\"}\n          </Grid>\n          <Grid item xs={3}>\n            Sign:\n          </Grid>\n          <Grid item xs={3}>\n            {selectedPoint && selectedPoint.sign ? selectedPoint.sign : \"\"}\n          </Grid>\n          <Grid item xs={3}>\n            Point index:\n          </Grid>\n          <Grid item xs={3}>\n            {selectedPoint && selectedPoint.index ? selectedPoint.index : \"\"}\n          </Grid>\n          <Grid className={classes.quickSelectSignStyle} item xs={12}>\n            <ButtonGroup color=\"primary\" fullWidth>\n              {signButtons.map((item) => {\n                return (\n                  <Button\n                    disabled={item.value === \"\" && selectedPoint?.sign === \"\"}\n                    key={item.label}\n                    onClick={() => handleCLickAndPress(item)}\n                  >\n                    {item.label}\n                  </Button>\n                );\n              })}\n            </ButtonGroup>\n          </Grid>\n          <Grid className={classes.quickOptionHints} item xs={12}>\n            <Typography>\n              Hint: You can use keyboard buttons to mark points. Press 'd' to\n              delete.\n            </Typography>\n          </Grid>\n        </Grid>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default PointEditorDialog;\n","import { useState, useEffect } from \"react\";\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n","import Plot from \"../../../node_modules/react-plotly.js/react-plotly\";\nimport { useSelector } from \"react-redux\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  ArrowBackIos,\n  ArrowForwardIos,\n  FirstPage,\n  LastPage,\n} from \"@material-ui/icons\";\nimport { Box, IconButton, makeStyles, Typography } from \"@material-ui/core\";\nimport PointEditorDialog from \"./PointEditorDialog\";\nimport useWindowDimensions from \"../../store/customHooks/useWindowDimension\";\n\nconst useStyles = makeStyles({\n  buttonStyle: {\n    \"&:hover, &:focus\": {\n      background: \"none\",\n    },\n  },\n});\n\nconst EKGPlotComponent = ({ counter, setCounter }) => {\n  const classes = useStyles();\n  const [openPointModal, setOpenPointModal] = useState(false);\n  const [selectedPoint, setSelectedPoint] = useState();\n  const ekgDataPlot = useSelector((state) => state.ekgData.ekg);\n  const lengthOfR = useSelector((state) => state.ekgData.signQuantity.R);\n  const indexR = useSelector((state) => state.ekgData.ekgDataInfo.RIndex);\n  const navigateByR = useSelector((state) => state.ekgData.navigateByR);\n\n  const start = 0;\n  const finish = 100;\n  const step = 100;\n\n  const length = navigateByR ? lengthOfR : Math.ceil(ekgDataPlot.length / step);\n\n  const { height, width } = useWindowDimensions();\n  const [xAxisData, setXAxisData] = useState([]);\n  const [yAxisData, setYAxisData] = useState([]);\n  const [textData, setTextData] = useState([]);\n  const [annotation, setAnnotation] = useState([]);\n\n  useEffect(() => {\n    if (ekgDataPlot.length) {\n      let stepValue;\n      if (navigateByR) {\n        if (counter === 1) stepValue = [0, indexR[counter]];\n        else stepValue = [indexR[counter - 1], indexR[counter + 1]];\n      } else\n        stepValue = [start + step * (counter - 1), finish + step * counter];\n\n      const annotations = [];\n      setXAxisData(\n        ekgDataPlot.slice(stepValue[0], stepValue[1]).map((item) => item[0])\n      );\n      setYAxisData(\n        ekgDataPlot.slice(stepValue[0], stepValue[1]).map((item) => item[1])\n      );\n      setTextData(\n        ekgDataPlot.slice(stepValue[0], stepValue[1]).map((item) => item[2])\n      );\n      ekgDataPlot.slice(stepValue[0], stepValue[1]).forEach((item) => {\n        if (item[2]) {\n          annotations.push({\n            x: item[0],\n            y: item[1],\n            xref: \"x\",\n            yref: \"y\",\n            text: item[2],\n            showarrow: true,\n            arrowhead: 3,\n            ax: 0,\n            ay: item[2] === \"Q\" || item[2] === \"S\" ? 40 : -40,\n          });\n        }\n      });\n      setAnnotation(annotations);\n    }\n  }, [ekgDataPlot, counter, indexR, navigateByR]);\n\n  return (\n    <>\n      <Box display=\"flex\" justifyContent=\"center\">\n        {!ekgDataPlot.length ? (\n          <Typography variant={\"h2\"}>No data to show</Typography>\n        ) : (\n          <Box display=\"flex\" alignItems=\"center\">\n            <IconButton\n              disabled={counter === 1}\n              onClick={() => {\n                setCounter(1);\n              }}\n              className={classes.buttonStyle}\n            >\n              <FirstPage fontSize=\"large\" />\n            </IconButton>\n            <IconButton\n              disabled={counter === 1}\n              onClick={() => {\n                setCounter((oldValue) => oldValue - 1);\n              }}\n              className={classes.buttonStyle}\n            >\n              <ArrowBackIos fontSize=\"large\" />\n            </IconButton>\n            <Plot\n              data={[\n                {\n                  x: xAxisData,\n                  y: yAxisData,\n                  text: textData,\n                  type: \"scatter\",\n                  mode: \"lines+markers\",\n                  marker: { color: \"red\" },\n                },\n              ]}\n              layout={{\n                annotations: annotation,\n                height: height * 0.75,\n                width: width * 0.75,\n                title: `ECG (${counter}/${length})`,\n              }}\n              onClick={(e) => {\n                setOpenPointModal(true);\n                setSelectedPoint({\n                  x: e.points[0].x,\n                  y: e.points[0].y,\n                  index:\n                    e.points[0].pointIndex +\n                    (counter === 1\n                      ? 0\n                      : navigateByR\n                      ? indexR[counter - 1]\n                      : step * (counter - 1)),\n                  sign: e.points[0].text ?? \"\",\n                });\n              }}\n            />\n            <IconButton\n              disabled={counter === length}\n              onClick={() => {\n                setCounter((oldValue) => oldValue + 1);\n              }}\n              className={classes.buttonStyle}\n            >\n              <ArrowForwardIos fontSize=\"large\" />\n            </IconButton>\n            <IconButton\n              disabled={counter === length}\n              onClick={() => {\n                setCounter(length);\n              }}\n              className={classes.buttonStyle}\n            >\n              <LastPage fontSize=\"large\" />\n            </IconButton>\n          </Box>\n        )}\n      </Box>\n      <PointEditorDialog\n        setSelectedPoint={setSelectedPoint}\n        openPointModal={openPointModal}\n        setOpenPointModal={setOpenPointModal}\n        selectedPoint={selectedPoint}\n      />\n    </>\n  );\n};\n\nexport default EKGPlotComponent;\n","import {\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { useAppSelector } from \"../../store/hooks\";\n\nconst createData = (name: string, quantity: number) => {\n  return { name, quantity };\n};\n\nconst InformationComponent = () => {\n  const information = useAppSelector((state) => state.ekgData.signQuantity);\n  const rows = [\n    createData(\"P\", information.P),\n    createData(\"Q\", information.Q),\n    createData(\"R\", information.R),\n    createData(\"S\", information.S),\n    createData(\"T\", information.T),\n  ];\n  return (\n    <Box\n      marginTop={3}\n      borderRadius={20}\n      width={\"480px\"}\n      border={\"solid 2px grey\"}\n      bgcolor=\"background.paper\"\n    >\n      <Box m={2} p={2} display=\"flex\" justifyContent=\"center\">\n        <Typography variant={\"h5\"}>\n          Number of occurrences of characters\n        </Typography>\n      </Box>\n      <Box paddingBottom={2}>\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Sign</TableCell>\n              <TableCell>Quantity</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => (\n              <TableRow key={row.name}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.name}\n                </TableCell>\n                <TableCell>{row.quantity}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </Box>\n    </Box>\n  );\n};\n\nexport default InformationComponent;\n","import NavBar from \"../NavBar/NavBar\";\nimport { Box } from \"@material-ui/core\";\nimport EKGPlotComponent from \"../EKGPlotComponent/EKGPlotComponent\";\nimport InformationComponent from \"../InformationComponent/InformationComponent\";\nimport { useAppSelector } from \"../../store/hooks\";\nimport { useState } from \"react\";\n\nconst MainPage = () => {\n  const showInfo = useAppSelector((state) => state.ekgData.loaded);\n  const RPointsLength = useAppSelector((state) => state.ekgData.signQuantity.R);\n  const [counter, setCounter] = useState(1);\n  return (\n    <Box\n      tabIndex={0}\n      onKeyDown={(e) => {\n        if (showInfo) {\n          switch (e.key) {\n            case \"ArrowLeft\":\n              e.preventDefault();\n              if (counter !== 1) setCounter((oldValue) => oldValue - 1);\n              break;\n            case \"ArrowRight\":\n              e.preventDefault();\n              if (counter < RPointsLength)\n                setCounter((oldValue) => oldValue + 1);\n              break;\n            default:\n              break;\n          }\n        }\n      }}\n      m={1}\n      p={1}\n    >\n      <NavBar setCounter={setCounter} />\n      <Box\n        marginTop={2}\n        borderRadius={20}\n        padding={5}\n        border={\"solid 2px grey\"}\n        bgcolor=\"background.paper\"\n      >\n        <EKGPlotComponent counter={counter} setCounter={setCounter} />\n      </Box>\n      {showInfo ? <InformationComponent /> : null}\n    </Box>\n  );\n};\n\nexport default MainPage;\n","import { Switch, Route } from \"react-router-dom\";\nimport HomePage from \"./Components/HomePage/HomePage\";\nimport MainPage from \"./Components/MainPage/MainPage\";\n\nconst App = () => {\n  return (\n    <Switch>\n      <Route path={\"/ECGDataAnalyzer\"}>\n        <MainPage />\n      </Route>\n      <Route path={\"/\"}>\n        <HomePage />\n      </Route>\n    </Switch>\n  );\n};\n\nexport default App;\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport { persistReducer, persistStore } from \"redux-persist\";\nimport ekgDataSlice from \"./ekgDataSlice\";\nimport thunk from \"redux-thunk\";\nimport createIdbStorage from \"@piotr-cz/redux-persist-idb-storage\";\n\nconst reducers = combineReducers({\n  ekgData: ekgDataSlice,\n});\n\nconst persistConfig = {\n  version: 1,\n  key: \"root\",\n  storage: createIdbStorage({ name: \"ECGSelector\", storeName: \"redux\" }),\n};\n\nconst persistedReducers = persistReducer(persistConfig, reducers);\n\nexport const store = configureStore({\n  reducer: persistedReducers,\n  devTools: process.env.NODE_ENV !== \"production\",\n  middleware: [thunk],\n});\n\nexport const persist = persistStore(store);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport { Provider } from \"react-redux\";\nimport { persist, store } from \"./store/store\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { ToastProvider } from \"react-toast-notifications\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persist}>\n      <BrowserRouter>\n        <ToastProvider>\n          <App />\n        </ToastProvider>\n      </BrowserRouter>\n    </PersistGate>\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}